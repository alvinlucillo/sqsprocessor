package server

import (
	"context"
	"log"
	"net"
	"os"
	"testing"

	pb "github.com/alvinlucillo/sqs-processor/protogen/sqs"
	"github.com/rs/zerolog"

	"google.golang.org/grpc"
	"google.golang.org/grpc/test/bufconn"
)

const bufSize = 1024 * 1024

var lis *bufconn.Listener

func init() {
	lis = bufconn.Listen(bufSize)
	s := grpc.NewServer()

	logger := zerolog.New(os.Stdout).With().Timestamp().Caller().Logger()

	server, err := NewServer(logger, nil)
	if err != nil {
		logger.Fatal().Msgf("Failed to create server: %v", err)
	}

	pb.RegisterSQSServiceServer(s, server)

	go func() {
		if err := s.Serve(lis); err != nil {
			log.Fatal(err)
		}
	}()
}

func bufDialer(ctx context.Context, address string) (net.Conn, error) {
	return lis.Dial()
}

func TestServer(t *testing.T) {
	ctx := context.Background()
	conn, err := grpc.DialContext(ctx, "bufnet", grpc.WithContextDialer(bufDialer), grpc.WithInsecure())
	if err != nil {
		t.Fatal(err)
	}
	defer conn.Close()

	client := pb.NewSQSServiceClient(conn)
	resp, err := client.ReceiveMessage(ctx, &pb.SQSReceiveMessageRequest{})
	if err != nil {
		t.Fatal(err)
	}

	t.Log("result", resp.Messages)

}
