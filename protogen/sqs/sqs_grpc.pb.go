// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sqs.proto

package sqs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SQSService_ReceiveMessage_FullMethodName = "/sqs.SQSService/ReceiveMessage"
	SQSService_DeleteMessage_FullMethodName  = "/sqs.SQSService/DeleteMessage"
)

// SQSServiceClient is the client API for SQSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQSServiceClient interface {
	ReceiveMessage(ctx context.Context, in *SQSReceiveMessageRequest, opts ...grpc.CallOption) (*SQSReceiveMessageResponse, error)
	DeleteMessage(ctx context.Context, in *SQSDeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sQSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQSServiceClient(cc grpc.ClientConnInterface) SQSServiceClient {
	return &sQSServiceClient{cc}
}

func (c *sQSServiceClient) ReceiveMessage(ctx context.Context, in *SQSReceiveMessageRequest, opts ...grpc.CallOption) (*SQSReceiveMessageResponse, error) {
	out := new(SQSReceiveMessageResponse)
	err := c.cc.Invoke(ctx, SQSService_ReceiveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQSServiceClient) DeleteMessage(ctx context.Context, in *SQSDeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SQSService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQSServiceServer is the server API for SQSService service.
// All implementations must embed UnimplementedSQSServiceServer
// for forward compatibility
type SQSServiceServer interface {
	ReceiveMessage(context.Context, *SQSReceiveMessageRequest) (*SQSReceiveMessageResponse, error)
	DeleteMessage(context.Context, *SQSDeleteMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSQSServiceServer()
}

// UnimplementedSQSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSQSServiceServer struct {
}

func (UnimplementedSQSServiceServer) ReceiveMessage(context.Context, *SQSReceiveMessageRequest) (*SQSReceiveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedSQSServiceServer) DeleteMessage(context.Context, *SQSDeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedSQSServiceServer) mustEmbedUnimplementedSQSServiceServer() {}

// UnsafeSQSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQSServiceServer will
// result in compilation errors.
type UnsafeSQSServiceServer interface {
	mustEmbedUnimplementedSQSServiceServer()
}

func RegisterSQSServiceServer(s grpc.ServiceRegistrar, srv SQSServiceServer) {
	s.RegisterService(&SQSService_ServiceDesc, srv)
}

func _SQSService_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQSReceiveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQSService_ReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).ReceiveMessage(ctx, req.(*SQSReceiveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQSService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQSDeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQSService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).DeleteMessage(ctx, req.(*SQSDeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQSService_ServiceDesc is the grpc.ServiceDesc for SQSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sqs.SQSService",
	HandlerType: (*SQSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMessage",
			Handler:    _SQSService_ReceiveMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _SQSService_DeleteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sqs.proto",
}
